#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FindPianos.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="FindPianosToilets")]
	public partial class PianoDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertPianoListing(PianoListing instance);
    partial void UpdatePianoListing(PianoListing instance);
    partial void DeletePianoListing(PianoListing instance);
    partial void InsertWeekDay(WeekDay instance);
    partial void UpdateWeekDay(WeekDay instance);
    partial void DeleteWeekDay(WeekDay instance);
    partial void InsertPianoReviewComment(PianoReviewComment instance);
    partial void UpdatePianoReviewComment(PianoReviewComment instance);
    partial void DeletePianoReviewComment(PianoReviewComment instance);
    partial void InsertPianoReviewRevision(PianoReviewRevision instance);
    partial void UpdatePianoReviewRevision(PianoReviewRevision instance);
    partial void DeletePianoReviewRevision(PianoReviewRevision instance);
    partial void InsertPianoReview(PianoReview instance);
    partial void UpdatePianoReview(PianoReview instance);
    partial void DeletePianoReview(PianoReview instance);
    partial void InsertPianoStyle(PianoStyle instance);
    partial void UpdatePianoStyle(PianoStyle instance);
    partial void DeletePianoStyle(PianoStyle instance);
    partial void InsertPianoVenueHour(PianoVenueHour instance);
    partial void UpdatePianoVenueHour(PianoVenueHour instance);
    partial void DeletePianoVenueHour(PianoVenueHour instance);
    partial void InsertPianoVenue(PianoVenue instance);
    partial void UpdatePianoVenue(PianoVenue instance);
    partial void DeletePianoVenue(PianoVenue instance);
    partial void InsertToiletListing(ToiletListing instance);
    partial void UpdateToiletListing(ToiletListing instance);
    partial void DeleteToiletListing(ToiletListing instance);
    partial void InsertToiletReview(ToiletReview instance);
    partial void UpdateToiletReview(ToiletReview instance);
    partial void DeleteToiletReview(ToiletReview instance);
    partial void InsertToiletStyle(ToiletStyle instance);
    partial void UpdateToiletStyle(ToiletStyle instance);
    partial void DeleteToiletStyle(ToiletStyle instance);
    partial void InsertToiletVenueHour(ToiletVenueHour instance);
    partial void UpdateToiletVenueHour(ToiletVenueHour instance);
    partial void DeleteToiletVenueHour(ToiletVenueHour instance);
    partial void InsertToiletVenue(ToiletVenue instance);
    partial void UpdateToiletVenue(ToiletVenue instance);
    partial void DeleteToiletVenue(ToiletVenue instance);
    #endregion
		
		public PianoDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["FindPianosToiletsConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public PianoDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PianoDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PianoDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PianoDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<PianoListing> PianoListings
		{
			get
			{
				return this.GetTable<PianoListing>();
			}
		}
		
		public System.Data.Linq.Table<WeekDay> WeekDays
		{
			get
			{
				return this.GetTable<WeekDay>();
			}
		}
		
		public System.Data.Linq.Table<PianoReviewComment> PianoReviewComments
		{
			get
			{
				return this.GetTable<PianoReviewComment>();
			}
		}
		
		public System.Data.Linq.Table<PianoReviewRevision> PianoReviewRevisions
		{
			get
			{
				return this.GetTable<PianoReviewRevision>();
			}
		}
		
		public System.Data.Linq.Table<PianoReview> PianoReviews
		{
			get
			{
				return this.GetTable<PianoReview>();
			}
		}
		
		public System.Data.Linq.Table<PianoStyle> PianoStyles
		{
			get
			{
				return this.GetTable<PianoStyle>();
			}
		}
		
		public System.Data.Linq.Table<PianoVenueHour> PianoVenueHours
		{
			get
			{
				return this.GetTable<PianoVenueHour>();
			}
		}
		
		public System.Data.Linq.Table<PianoVenue> PianoVenues
		{
			get
			{
				return this.GetTable<PianoVenue>();
			}
		}
		
		public System.Data.Linq.Table<ToiletListing> ToiletListings
		{
			get
			{
				return this.GetTable<ToiletListing>();
			}
		}
		
		public System.Data.Linq.Table<ToiletReview> ToiletReviews
		{
			get
			{
				return this.GetTable<ToiletReview>();
			}
		}
		
		public System.Data.Linq.Table<ToiletStyle> ToiletStyles
		{
			get
			{
				return this.GetTable<ToiletStyle>();
			}
		}
		
		public System.Data.Linq.Table<ToiletVenueHour> ToiletVenueHours
		{
			get
			{
				return this.GetTable<ToiletVenueHour>();
			}
		}
		
		public System.Data.Linq.Table<ToiletVenue> ToiletVenues
		{
			get
			{
				return this.GetTable<ToiletVenue>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PianoListings")]
	public partial class PianoListing : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _PianoID;
		
		private decimal _Lat;
		
		private decimal _Long;
		
		private string _StreetAddress;
		
		private long _OriginalSubmitterUserID;
		
		private System.DateTime _DateOfSubmission;
		
		private EntitySet<PianoReview> _PianoReviews;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPianoIDChanging(long value);
    partial void OnPianoIDChanged();
    partial void OnLatChanging(decimal value);
    partial void OnLatChanged();
    partial void OnLongChanging(decimal value);
    partial void OnLongChanged();
    partial void OnStreetAddressChanging(string value);
    partial void OnStreetAddressChanged();
    partial void OnOriginalSubmitterUserIDChanging(long value);
    partial void OnOriginalSubmitterUserIDChanged();
    partial void OnDateOfSubmissionChanging(System.DateTime value);
    partial void OnDateOfSubmissionChanged();
    #endregion
		
		public PianoListing()
		{
			this._PianoReviews = new EntitySet<PianoReview>(new Action<PianoReview>(this.attach_PianoReviews), new Action<PianoReview>(this.detach_PianoReviews));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PianoID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long PianoID
		{
			get
			{
				return this._PianoID;
			}
			set
			{
				if ((this._PianoID != value))
				{
					this.OnPianoIDChanging(value);
					this.SendPropertyChanging();
					this._PianoID = value;
					this.SendPropertyChanged("PianoID");
					this.OnPianoIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lat", DbType="Decimal(18,0) NOT NULL")]
		public decimal Lat
		{
			get
			{
				return this._Lat;
			}
			set
			{
				if ((this._Lat != value))
				{
					this.OnLatChanging(value);
					this.SendPropertyChanging();
					this._Lat = value;
					this.SendPropertyChanged("Lat");
					this.OnLatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Long", DbType="Decimal(18,0) NOT NULL")]
		public decimal Long
		{
			get
			{
				return this._Long;
			}
			set
			{
				if ((this._Long != value))
				{
					this.OnLongChanging(value);
					this.SendPropertyChanging();
					this._Long = value;
					this.SendPropertyChanged("Long");
					this.OnLongChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StreetAddress", DbType="NVarChar(MAX)")]
		public string StreetAddress
		{
			get
			{
				return this._StreetAddress;
			}
			set
			{
				if ((this._StreetAddress != value))
				{
					this.OnStreetAddressChanging(value);
					this.SendPropertyChanging();
					this._StreetAddress = value;
					this.SendPropertyChanged("StreetAddress");
					this.OnStreetAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OriginalSubmitterUserID", DbType="BigInt NOT NULL")]
		public long OriginalSubmitterUserID
		{
			get
			{
				return this._OriginalSubmitterUserID;
			}
			set
			{
				if ((this._OriginalSubmitterUserID != value))
				{
					this.OnOriginalSubmitterUserIDChanging(value);
					this.SendPropertyChanging();
					this._OriginalSubmitterUserID = value;
					this.SendPropertyChanged("OriginalSubmitterUserID");
					this.OnOriginalSubmitterUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfSubmission", DbType="DateTime NOT NULL")]
		public System.DateTime DateOfSubmission
		{
			get
			{
				return this._DateOfSubmission;
			}
			set
			{
				if ((this._DateOfSubmission != value))
				{
					this.OnDateOfSubmissionChanging(value);
					this.SendPropertyChanging();
					this._DateOfSubmission = value;
					this.SendPropertyChanged("DateOfSubmission");
					this.OnDateOfSubmissionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PianoListing_PianoReview", Storage="_PianoReviews", ThisKey="PianoID", OtherKey="PianoListingID")]
		public EntitySet<PianoReview> PianoReviews
		{
			get
			{
				return this._PianoReviews;
			}
			set
			{
				this._PianoReviews.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PianoReviews(PianoReview entity)
		{
			this.SendPropertyChanging();
			entity.PianoListing = this;
		}
		
		private void detach_PianoReviews(PianoReview entity)
		{
			this.SendPropertyChanging();
			entity.PianoListing = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WeekDays")]
	public partial class WeekDay : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _WeekDayID;
		
		private string _WeekDayName;
		
		private EntitySet<PianoVenueHour> _PianoVenueHours;
		
		private EntitySet<ToiletVenueHour> _ToiletVenueHours;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnWeekDayIDChanging(int value);
    partial void OnWeekDayIDChanged();
    partial void OnWeekDayNameChanging(string value);
    partial void OnWeekDayNameChanged();
    #endregion
		
		public WeekDay()
		{
			this._PianoVenueHours = new EntitySet<PianoVenueHour>(new Action<PianoVenueHour>(this.attach_PianoVenueHours), new Action<PianoVenueHour>(this.detach_PianoVenueHours));
			this._ToiletVenueHours = new EntitySet<ToiletVenueHour>(new Action<ToiletVenueHour>(this.attach_ToiletVenueHours), new Action<ToiletVenueHour>(this.detach_ToiletVenueHours));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WeekDayID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int WeekDayID
		{
			get
			{
				return this._WeekDayID;
			}
			set
			{
				if ((this._WeekDayID != value))
				{
					this.OnWeekDayIDChanging(value);
					this.SendPropertyChanging();
					this._WeekDayID = value;
					this.SendPropertyChanged("WeekDayID");
					this.OnWeekDayIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WeekDayName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string WeekDayName
		{
			get
			{
				return this._WeekDayName;
			}
			set
			{
				if ((this._WeekDayName != value))
				{
					this.OnWeekDayNameChanging(value);
					this.SendPropertyChanging();
					this._WeekDayName = value;
					this.SendPropertyChanged("WeekDayName");
					this.OnWeekDayNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WeekDay_PianoVenueHour", Storage="_PianoVenueHours", ThisKey="WeekDayID", OtherKey="DayOfWeek")]
		public EntitySet<PianoVenueHour> PianoVenueHours
		{
			get
			{
				return this._PianoVenueHours;
			}
			set
			{
				this._PianoVenueHours.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WeekDay_ToiletVenueHour", Storage="_ToiletVenueHours", ThisKey="WeekDayID", OtherKey="DayOfWeek")]
		public EntitySet<ToiletVenueHour> ToiletVenueHours
		{
			get
			{
				return this._ToiletVenueHours;
			}
			set
			{
				this._ToiletVenueHours.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PianoVenueHours(PianoVenueHour entity)
		{
			this.SendPropertyChanging();
			entity.WeekDay = this;
		}
		
		private void detach_PianoVenueHours(PianoVenueHour entity)
		{
			this.SendPropertyChanging();
			entity.WeekDay = null;
		}
		
		private void attach_ToiletVenueHours(ToiletVenueHour entity)
		{
			this.SendPropertyChanging();
			entity.WeekDay = this;
		}
		
		private void detach_ToiletVenueHours(ToiletVenueHour entity)
		{
			this.SendPropertyChanging();
			entity.WeekDay = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PianoReviewComments")]
	public partial class PianoReviewComment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _CommentID;
		
		private long _PianoReviewID;
		
		private long _AuthorUserID;
		
		private string _MessageMarkdown;
		
		private string _MessageHTML;
		
		private EntityRef<PianoReview> _PianoReview;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCommentIDChanging(long value);
    partial void OnCommentIDChanged();
    partial void OnPianoReviewIDChanging(long value);
    partial void OnPianoReviewIDChanged();
    partial void OnAuthorUserIDChanging(long value);
    partial void OnAuthorUserIDChanged();
    partial void OnMessageMarkdownChanging(string value);
    partial void OnMessageMarkdownChanged();
    partial void OnMessageHTMLChanging(string value);
    partial void OnMessageHTMLChanged();
    #endregion
		
		public PianoReviewComment()
		{
			this._PianoReview = default(EntityRef<PianoReview>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommentID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long CommentID
		{
			get
			{
				return this._CommentID;
			}
			set
			{
				if ((this._CommentID != value))
				{
					this.OnCommentIDChanging(value);
					this.SendPropertyChanging();
					this._CommentID = value;
					this.SendPropertyChanged("CommentID");
					this.OnCommentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PianoReviewID", DbType="BigInt NOT NULL")]
		public long PianoReviewID
		{
			get
			{
				return this._PianoReviewID;
			}
			set
			{
				if ((this._PianoReviewID != value))
				{
					if (this._PianoReview.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPianoReviewIDChanging(value);
					this.SendPropertyChanging();
					this._PianoReviewID = value;
					this.SendPropertyChanged("PianoReviewID");
					this.OnPianoReviewIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuthorUserID", DbType="BigInt NOT NULL")]
		public long AuthorUserID
		{
			get
			{
				return this._AuthorUserID;
			}
			set
			{
				if ((this._AuthorUserID != value))
				{
					this.OnAuthorUserIDChanging(value);
					this.SendPropertyChanging();
					this._AuthorUserID = value;
					this.SendPropertyChanged("AuthorUserID");
					this.OnAuthorUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MessageMarkdown", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string MessageMarkdown
		{
			get
			{
				return this._MessageMarkdown;
			}
			set
			{
				if ((this._MessageMarkdown != value))
				{
					this.OnMessageMarkdownChanging(value);
					this.SendPropertyChanging();
					this._MessageMarkdown = value;
					this.SendPropertyChanged("MessageMarkdown");
					this.OnMessageMarkdownChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MessageHTML", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string MessageHTML
		{
			get
			{
				return this._MessageHTML;
			}
			set
			{
				if ((this._MessageHTML != value))
				{
					this.OnMessageHTMLChanging(value);
					this.SendPropertyChanging();
					this._MessageHTML = value;
					this.SendPropertyChanged("MessageHTML");
					this.OnMessageHTMLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PianoReview_PianoReviewComment", Storage="_PianoReview", ThisKey="PianoReviewID", OtherKey="PianoReviewID", IsForeignKey=true)]
		public PianoReview PianoReview
		{
			get
			{
				return this._PianoReview.Entity;
			}
			set
			{
				PianoReview previousValue = this._PianoReview.Entity;
				if (((previousValue != value) 
							|| (this._PianoReview.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PianoReview.Entity = null;
						previousValue.PianoReviewComments.Remove(this);
					}
					this._PianoReview.Entity = value;
					if ((value != null))
					{
						value.PianoReviewComments.Add(this);
						this._PianoReviewID = value.PianoReviewID;
					}
					else
					{
						this._PianoReviewID = default(long);
					}
					this.SendPropertyChanged("PianoReview");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PianoReviewRevisions")]
	public partial class PianoReviewRevision : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _PianoReviewRevisionID;
		
		private long _PianoReviewID;
		
		private int _PianoStyleID;
		
		private string _Brand;
		
		private string _Model;
		
		private int _RatingOverall;
		
		private System.Nullable<int> _RatingTuning;
		
		private System.Nullable<int> _RatingToneQuality;
		
		private System.Nullable<int> _RatingPlayingCapability;
		
		private string _Message;
		
		private long _VenueID;
		
		private System.DateTime _DateOfRevision;
		
		private long _SubmitterUserID;
		
		private System.DateTime _DateOfLastUsageOfPianoBySubmitter;
		
		private int _RevisionNumberOfReview;
		
		private EntityRef<PianoReview> _PianoReview;
		
		private EntityRef<PianoStyle> _PianoStyle;
		
		private EntityRef<PianoVenue> _PianoVenue;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPianoReviewRevisionIDChanging(long value);
    partial void OnPianoReviewRevisionIDChanged();
    partial void OnPianoReviewIDChanging(long value);
    partial void OnPianoReviewIDChanged();
    partial void OnPianoStyleIDChanging(int value);
    partial void OnPianoStyleIDChanged();
    partial void OnBrandChanging(string value);
    partial void OnBrandChanged();
    partial void OnModelChanging(string value);
    partial void OnModelChanged();
    partial void OnRatingOverallChanging(int value);
    partial void OnRatingOverallChanged();
    partial void OnRatingTuningChanging(System.Nullable<int> value);
    partial void OnRatingTuningChanged();
    partial void OnRatingToneQualityChanging(System.Nullable<int> value);
    partial void OnRatingToneQualityChanged();
    partial void OnRatingPlayingCapabilityChanging(System.Nullable<int> value);
    partial void OnRatingPlayingCapabilityChanged();
    partial void OnMessageChanging(string value);
    partial void OnMessageChanged();
    partial void OnVenueIDChanging(long value);
    partial void OnVenueIDChanged();
    partial void OnDateOfRevisionChanging(System.DateTime value);
    partial void OnDateOfRevisionChanged();
    partial void OnSubmitterUserIDChanging(long value);
    partial void OnSubmitterUserIDChanged();
    partial void OnDateOfLastUsageOfPianoBySubmitterChanging(System.DateTime value);
    partial void OnDateOfLastUsageOfPianoBySubmitterChanged();
    partial void OnRevisionNumberOfReviewChanging(int value);
    partial void OnRevisionNumberOfReviewChanged();
    #endregion
		
		public PianoReviewRevision()
		{
			this._PianoReview = default(EntityRef<PianoReview>);
			this._PianoStyle = default(EntityRef<PianoStyle>);
			this._PianoVenue = default(EntityRef<PianoVenue>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PianoReviewRevisionID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long PianoReviewRevisionID
		{
			get
			{
				return this._PianoReviewRevisionID;
			}
			set
			{
				if ((this._PianoReviewRevisionID != value))
				{
					this.OnPianoReviewRevisionIDChanging(value);
					this.SendPropertyChanging();
					this._PianoReviewRevisionID = value;
					this.SendPropertyChanged("PianoReviewRevisionID");
					this.OnPianoReviewRevisionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PianoReviewID", DbType="BigInt NOT NULL")]
		public long PianoReviewID
		{
			get
			{
				return this._PianoReviewID;
			}
			set
			{
				if ((this._PianoReviewID != value))
				{
					if (this._PianoReview.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPianoReviewIDChanging(value);
					this.SendPropertyChanging();
					this._PianoReviewID = value;
					this.SendPropertyChanged("PianoReviewID");
					this.OnPianoReviewIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PianoStyleID", DbType="Int NOT NULL")]
		public int PianoStyleID
		{
			get
			{
				return this._PianoStyleID;
			}
			set
			{
				if ((this._PianoStyleID != value))
				{
					if (this._PianoStyle.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPianoStyleIDChanging(value);
					this.SendPropertyChanging();
					this._PianoStyleID = value;
					this.SendPropertyChanged("PianoStyleID");
					this.OnPianoStyleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Brand", DbType="NVarChar(MAX)")]
		public string Brand
		{
			get
			{
				return this._Brand;
			}
			set
			{
				if ((this._Brand != value))
				{
					this.OnBrandChanging(value);
					this.SendPropertyChanging();
					this._Brand = value;
					this.SendPropertyChanged("Brand");
					this.OnBrandChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Model", DbType="NVarChar(MAX)")]
		public string Model
		{
			get
			{
				return this._Model;
			}
			set
			{
				if ((this._Model != value))
				{
					this.OnModelChanging(value);
					this.SendPropertyChanging();
					this._Model = value;
					this.SendPropertyChanged("Model");
					this.OnModelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RatingOverall", DbType="Int NOT NULL")]
		public int RatingOverall
		{
			get
			{
				return this._RatingOverall;
			}
			set
			{
				if ((this._RatingOverall != value))
				{
					this.OnRatingOverallChanging(value);
					this.SendPropertyChanging();
					this._RatingOverall = value;
					this.SendPropertyChanged("RatingOverall");
					this.OnRatingOverallChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RatingTuning", DbType="Int")]
		public System.Nullable<int> RatingTuning
		{
			get
			{
				return this._RatingTuning;
			}
			set
			{
				if ((this._RatingTuning != value))
				{
					this.OnRatingTuningChanging(value);
					this.SendPropertyChanging();
					this._RatingTuning = value;
					this.SendPropertyChanged("RatingTuning");
					this.OnRatingTuningChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RatingToneQuality", DbType="Int")]
		public System.Nullable<int> RatingToneQuality
		{
			get
			{
				return this._RatingToneQuality;
			}
			set
			{
				if ((this._RatingToneQuality != value))
				{
					this.OnRatingToneQualityChanging(value);
					this.SendPropertyChanging();
					this._RatingToneQuality = value;
					this.SendPropertyChanged("RatingToneQuality");
					this.OnRatingToneQualityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RatingPlayingCapability", DbType="Int")]
		public System.Nullable<int> RatingPlayingCapability
		{
			get
			{
				return this._RatingPlayingCapability;
			}
			set
			{
				if ((this._RatingPlayingCapability != value))
				{
					this.OnRatingPlayingCapabilityChanging(value);
					this.SendPropertyChanging();
					this._RatingPlayingCapability = value;
					this.SendPropertyChanged("RatingPlayingCapability");
					this.OnRatingPlayingCapabilityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Message", DbType="NVarChar(MAX)")]
		public string Message
		{
			get
			{
				return this._Message;
			}
			set
			{
				if ((this._Message != value))
				{
					this.OnMessageChanging(value);
					this.SendPropertyChanging();
					this._Message = value;
					this.SendPropertyChanged("Message");
					this.OnMessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VenueID", DbType="BigInt NOT NULL")]
		public long VenueID
		{
			get
			{
				return this._VenueID;
			}
			set
			{
				if ((this._VenueID != value))
				{
					if (this._PianoVenue.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVenueIDChanging(value);
					this.SendPropertyChanging();
					this._VenueID = value;
					this.SendPropertyChanged("VenueID");
					this.OnVenueIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfRevision", DbType="DateTime NOT NULL")]
		public System.DateTime DateOfRevision
		{
			get
			{
				return this._DateOfRevision;
			}
			set
			{
				if ((this._DateOfRevision != value))
				{
					this.OnDateOfRevisionChanging(value);
					this.SendPropertyChanging();
					this._DateOfRevision = value;
					this.SendPropertyChanged("DateOfRevision");
					this.OnDateOfRevisionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubmitterUserID", DbType="BigInt NOT NULL")]
		public long SubmitterUserID
		{
			get
			{
				return this._SubmitterUserID;
			}
			set
			{
				if ((this._SubmitterUserID != value))
				{
					this.OnSubmitterUserIDChanging(value);
					this.SendPropertyChanging();
					this._SubmitterUserID = value;
					this.SendPropertyChanged("SubmitterUserID");
					this.OnSubmitterUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfLastUsageOfPianoBySubmitter", DbType="DateTime NOT NULL")]
		public System.DateTime DateOfLastUsageOfPianoBySubmitter
		{
			get
			{
				return this._DateOfLastUsageOfPianoBySubmitter;
			}
			set
			{
				if ((this._DateOfLastUsageOfPianoBySubmitter != value))
				{
					this.OnDateOfLastUsageOfPianoBySubmitterChanging(value);
					this.SendPropertyChanging();
					this._DateOfLastUsageOfPianoBySubmitter = value;
					this.SendPropertyChanged("DateOfLastUsageOfPianoBySubmitter");
					this.OnDateOfLastUsageOfPianoBySubmitterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RevisionNumberOfReview", DbType="Int NOT NULL")]
		public int RevisionNumberOfReview
		{
			get
			{
				return this._RevisionNumberOfReview;
			}
			set
			{
				if ((this._RevisionNumberOfReview != value))
				{
					this.OnRevisionNumberOfReviewChanging(value);
					this.SendPropertyChanging();
					this._RevisionNumberOfReview = value;
					this.SendPropertyChanged("RevisionNumberOfReview");
					this.OnRevisionNumberOfReviewChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PianoReview_PianoReviewRevision", Storage="_PianoReview", ThisKey="PianoReviewID", OtherKey="PianoReviewID", IsForeignKey=true)]
		public PianoReview PianoReview
		{
			get
			{
				return this._PianoReview.Entity;
			}
			set
			{
				PianoReview previousValue = this._PianoReview.Entity;
				if (((previousValue != value) 
							|| (this._PianoReview.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PianoReview.Entity = null;
						previousValue.PianoReviewRevisions.Remove(this);
					}
					this._PianoReview.Entity = value;
					if ((value != null))
					{
						value.PianoReviewRevisions.Add(this);
						this._PianoReviewID = value.PianoReviewID;
					}
					else
					{
						this._PianoReviewID = default(long);
					}
					this.SendPropertyChanged("PianoReview");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PianoStyle_PianoReviewRevision", Storage="_PianoStyle", ThisKey="PianoStyleID", OtherKey="PianoStyleID", IsForeignKey=true)]
		public PianoStyle PianoStyle
		{
			get
			{
				return this._PianoStyle.Entity;
			}
			set
			{
				PianoStyle previousValue = this._PianoStyle.Entity;
				if (((previousValue != value) 
							|| (this._PianoStyle.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PianoStyle.Entity = null;
						previousValue.PianoReviewRevisions.Remove(this);
					}
					this._PianoStyle.Entity = value;
					if ((value != null))
					{
						value.PianoReviewRevisions.Add(this);
						this._PianoStyleID = value.PianoStyleID;
					}
					else
					{
						this._PianoStyleID = default(int);
					}
					this.SendPropertyChanged("PianoStyle");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PianoVenue_PianoReviewRevision", Storage="_PianoVenue", ThisKey="VenueID", OtherKey="VenueID", IsForeignKey=true)]
		public PianoVenue PianoVenue
		{
			get
			{
				return this._PianoVenue.Entity;
			}
			set
			{
				PianoVenue previousValue = this._PianoVenue.Entity;
				if (((previousValue != value) 
							|| (this._PianoVenue.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PianoVenue.Entity = null;
						previousValue.PianoReviewRevisions.Remove(this);
					}
					this._PianoVenue.Entity = value;
					if ((value != null))
					{
						value.PianoReviewRevisions.Add(this);
						this._VenueID = value.VenueID;
					}
					else
					{
						this._VenueID = default(long);
					}
					this.SendPropertyChanged("PianoVenue");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PianoReviews")]
	public partial class PianoReview : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _PianoReviewID;
		
		private long _PianoListingID;
		
		private EntitySet<PianoReviewComment> _PianoReviewComments;
		
		private EntitySet<PianoReviewRevision> _PianoReviewRevisions;
		
		private EntityRef<PianoListing> _PianoListing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPianoReviewIDChanging(long value);
    partial void OnPianoReviewIDChanged();
    partial void OnPianoListingIDChanging(long value);
    partial void OnPianoListingIDChanged();
    #endregion
		
		public PianoReview()
		{
			this._PianoReviewComments = new EntitySet<PianoReviewComment>(new Action<PianoReviewComment>(this.attach_PianoReviewComments), new Action<PianoReviewComment>(this.detach_PianoReviewComments));
			this._PianoReviewRevisions = new EntitySet<PianoReviewRevision>(new Action<PianoReviewRevision>(this.attach_PianoReviewRevisions), new Action<PianoReviewRevision>(this.detach_PianoReviewRevisions));
			this._PianoListing = default(EntityRef<PianoListing>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PianoReviewID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long PianoReviewID
		{
			get
			{
				return this._PianoReviewID;
			}
			set
			{
				if ((this._PianoReviewID != value))
				{
					this.OnPianoReviewIDChanging(value);
					this.SendPropertyChanging();
					this._PianoReviewID = value;
					this.SendPropertyChanged("PianoReviewID");
					this.OnPianoReviewIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PianoListingID", DbType="BigInt NOT NULL")]
		public long PianoListingID
		{
			get
			{
				return this._PianoListingID;
			}
			set
			{
				if ((this._PianoListingID != value))
				{
					if (this._PianoListing.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPianoListingIDChanging(value);
					this.SendPropertyChanging();
					this._PianoListingID = value;
					this.SendPropertyChanged("PianoListingID");
					this.OnPianoListingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PianoReview_PianoReviewComment", Storage="_PianoReviewComments", ThisKey="PianoReviewID", OtherKey="PianoReviewID")]
		public EntitySet<PianoReviewComment> PianoReviewComments
		{
			get
			{
				return this._PianoReviewComments;
			}
			set
			{
				this._PianoReviewComments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PianoReview_PianoReviewRevision", Storage="_PianoReviewRevisions", ThisKey="PianoReviewID", OtherKey="PianoReviewID")]
		public EntitySet<PianoReviewRevision> PianoReviewRevisions
		{
			get
			{
				return this._PianoReviewRevisions;
			}
			set
			{
				this._PianoReviewRevisions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PianoListing_PianoReview", Storage="_PianoListing", ThisKey="PianoListingID", OtherKey="PianoID", IsForeignKey=true)]
		public PianoListing PianoListing
		{
			get
			{
				return this._PianoListing.Entity;
			}
			set
			{
				PianoListing previousValue = this._PianoListing.Entity;
				if (((previousValue != value) 
							|| (this._PianoListing.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PianoListing.Entity = null;
						previousValue.PianoReviews.Remove(this);
					}
					this._PianoListing.Entity = value;
					if ((value != null))
					{
						value.PianoReviews.Add(this);
						this._PianoListingID = value.PianoID;
					}
					else
					{
						this._PianoListingID = default(long);
					}
					this.SendPropertyChanged("PianoListing");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PianoReviewComments(PianoReviewComment entity)
		{
			this.SendPropertyChanging();
			entity.PianoReview = this;
		}
		
		private void detach_PianoReviewComments(PianoReviewComment entity)
		{
			this.SendPropertyChanging();
			entity.PianoReview = null;
		}
		
		private void attach_PianoReviewRevisions(PianoReviewRevision entity)
		{
			this.SendPropertyChanging();
			entity.PianoReview = this;
		}
		
		private void detach_PianoReviewRevisions(PianoReviewRevision entity)
		{
			this.SendPropertyChanging();
			entity.PianoReview = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PianoStyles")]
	public partial class PianoStyle : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PianoStyleID;
		
		private string _Name;
		
		private EntitySet<PianoReviewRevision> _PianoReviewRevisions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPianoStyleIDChanging(int value);
    partial void OnPianoStyleIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public PianoStyle()
		{
			this._PianoReviewRevisions = new EntitySet<PianoReviewRevision>(new Action<PianoReviewRevision>(this.attach_PianoReviewRevisions), new Action<PianoReviewRevision>(this.detach_PianoReviewRevisions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PianoStyleID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PianoStyleID
		{
			get
			{
				return this._PianoStyleID;
			}
			set
			{
				if ((this._PianoStyleID != value))
				{
					this.OnPianoStyleIDChanging(value);
					this.SendPropertyChanging();
					this._PianoStyleID = value;
					this.SendPropertyChanged("PianoStyleID");
					this.OnPianoStyleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PianoStyle_PianoReviewRevision", Storage="_PianoReviewRevisions", ThisKey="PianoStyleID", OtherKey="PianoStyleID")]
		public EntitySet<PianoReviewRevision> PianoReviewRevisions
		{
			get
			{
				return this._PianoReviewRevisions;
			}
			set
			{
				this._PianoReviewRevisions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PianoReviewRevisions(PianoReviewRevision entity)
		{
			this.SendPropertyChanging();
			entity.PianoStyle = this;
		}
		
		private void detach_PianoReviewRevisions(PianoReviewRevision entity)
		{
			this.SendPropertyChanging();
			entity.PianoStyle = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PianoVenueHours")]
	public partial class PianoVenueHour : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _VenueHoursID;
		
		private long _VenueID;
		
		private int _DayOfWeek;
		
		private System.DateTime _StartTime;
		
		private System.DateTime _EndTime;
		
		private EntityRef<WeekDay> _WeekDay;
		
		private EntityRef<PianoVenue> _PianoVenue;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVenueHoursIDChanging(long value);
    partial void OnVenueHoursIDChanged();
    partial void OnVenueIDChanging(long value);
    partial void OnVenueIDChanged();
    partial void OnDayOfWeekChanging(int value);
    partial void OnDayOfWeekChanged();
    partial void OnStartTimeChanging(System.DateTime value);
    partial void OnStartTimeChanged();
    partial void OnEndTimeChanging(System.DateTime value);
    partial void OnEndTimeChanged();
    #endregion
		
		public PianoVenueHour()
		{
			this._WeekDay = default(EntityRef<WeekDay>);
			this._PianoVenue = default(EntityRef<PianoVenue>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VenueHoursID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long VenueHoursID
		{
			get
			{
				return this._VenueHoursID;
			}
			set
			{
				if ((this._VenueHoursID != value))
				{
					this.OnVenueHoursIDChanging(value);
					this.SendPropertyChanging();
					this._VenueHoursID = value;
					this.SendPropertyChanged("VenueHoursID");
					this.OnVenueHoursIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VenueID", DbType="BigInt NOT NULL")]
		public long VenueID
		{
			get
			{
				return this._VenueID;
			}
			set
			{
				if ((this._VenueID != value))
				{
					if (this._PianoVenue.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVenueIDChanging(value);
					this.SendPropertyChanging();
					this._VenueID = value;
					this.SendPropertyChanged("VenueID");
					this.OnVenueIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DayOfWeek", DbType="Int NOT NULL")]
		public int DayOfWeek
		{
			get
			{
				return this._DayOfWeek;
			}
			set
			{
				if ((this._DayOfWeek != value))
				{
					if (this._WeekDay.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDayOfWeekChanging(value);
					this.SendPropertyChanging();
					this._DayOfWeek = value;
					this.SendPropertyChanged("DayOfWeek");
					this.OnDayOfWeekChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartTime", DbType="DateTime NOT NULL")]
		public System.DateTime StartTime
		{
			get
			{
				return this._StartTime;
			}
			set
			{
				if ((this._StartTime != value))
				{
					this.OnStartTimeChanging(value);
					this.SendPropertyChanging();
					this._StartTime = value;
					this.SendPropertyChanged("StartTime");
					this.OnStartTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndTime", DbType="DateTime NOT NULL")]
		public System.DateTime EndTime
		{
			get
			{
				return this._EndTime;
			}
			set
			{
				if ((this._EndTime != value))
				{
					this.OnEndTimeChanging(value);
					this.SendPropertyChanging();
					this._EndTime = value;
					this.SendPropertyChanged("EndTime");
					this.OnEndTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WeekDay_PianoVenueHour", Storage="_WeekDay", ThisKey="DayOfWeek", OtherKey="WeekDayID", IsForeignKey=true)]
		public WeekDay WeekDay
		{
			get
			{
				return this._WeekDay.Entity;
			}
			set
			{
				WeekDay previousValue = this._WeekDay.Entity;
				if (((previousValue != value) 
							|| (this._WeekDay.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WeekDay.Entity = null;
						previousValue.PianoVenueHours.Remove(this);
					}
					this._WeekDay.Entity = value;
					if ((value != null))
					{
						value.PianoVenueHours.Add(this);
						this._DayOfWeek = value.WeekDayID;
					}
					else
					{
						this._DayOfWeek = default(int);
					}
					this.SendPropertyChanged("WeekDay");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PianoVenue_PianoVenueHour", Storage="_PianoVenue", ThisKey="VenueID", OtherKey="VenueID", IsForeignKey=true)]
		public PianoVenue PianoVenue
		{
			get
			{
				return this._PianoVenue.Entity;
			}
			set
			{
				PianoVenue previousValue = this._PianoVenue.Entity;
				if (((previousValue != value) 
							|| (this._PianoVenue.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PianoVenue.Entity = null;
						previousValue.PianoVenueHours.Remove(this);
					}
					this._PianoVenue.Entity = value;
					if ((value != null))
					{
						value.PianoVenueHours.Add(this);
						this._VenueID = value.VenueID;
					}
					else
					{
						this._VenueID = default(long);
					}
					this.SendPropertyChanged("PianoVenue");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PianoVenues")]
	public partial class PianoVenue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _VenueID;
		
		private string _VenueName;
		
		private EntitySet<PianoReviewRevision> _PianoReviewRevisions;
		
		private EntitySet<PianoVenueHour> _PianoVenueHours;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVenueIDChanging(long value);
    partial void OnVenueIDChanged();
    partial void OnVenueNameChanging(string value);
    partial void OnVenueNameChanged();
    #endregion
		
		public PianoVenue()
		{
			this._PianoReviewRevisions = new EntitySet<PianoReviewRevision>(new Action<PianoReviewRevision>(this.attach_PianoReviewRevisions), new Action<PianoReviewRevision>(this.detach_PianoReviewRevisions));
			this._PianoVenueHours = new EntitySet<PianoVenueHour>(new Action<PianoVenueHour>(this.attach_PianoVenueHours), new Action<PianoVenueHour>(this.detach_PianoVenueHours));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VenueID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long VenueID
		{
			get
			{
				return this._VenueID;
			}
			set
			{
				if ((this._VenueID != value))
				{
					this.OnVenueIDChanging(value);
					this.SendPropertyChanging();
					this._VenueID = value;
					this.SendPropertyChanged("VenueID");
					this.OnVenueIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VenueName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string VenueName
		{
			get
			{
				return this._VenueName;
			}
			set
			{
				if ((this._VenueName != value))
				{
					this.OnVenueNameChanging(value);
					this.SendPropertyChanging();
					this._VenueName = value;
					this.SendPropertyChanged("VenueName");
					this.OnVenueNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PianoVenue_PianoReviewRevision", Storage="_PianoReviewRevisions", ThisKey="VenueID", OtherKey="VenueID")]
		public EntitySet<PianoReviewRevision> PianoReviewRevisions
		{
			get
			{
				return this._PianoReviewRevisions;
			}
			set
			{
				this._PianoReviewRevisions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PianoVenue_PianoVenueHour", Storage="_PianoVenueHours", ThisKey="VenueID", OtherKey="VenueID")]
		public EntitySet<PianoVenueHour> PianoVenueHours
		{
			get
			{
				return this._PianoVenueHours;
			}
			set
			{
				this._PianoVenueHours.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PianoReviewRevisions(PianoReviewRevision entity)
		{
			this.SendPropertyChanging();
			entity.PianoVenue = this;
		}
		
		private void detach_PianoReviewRevisions(PianoReviewRevision entity)
		{
			this.SendPropertyChanging();
			entity.PianoVenue = null;
		}
		
		private void attach_PianoVenueHours(PianoVenueHour entity)
		{
			this.SendPropertyChanging();
			entity.PianoVenue = this;
		}
		
		private void detach_PianoVenueHours(PianoVenueHour entity)
		{
			this.SendPropertyChanging();
			entity.PianoVenue = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ToiletListings")]
	public partial class ToiletListing : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ToiletID;
		
		private decimal _Lat;
		
		private decimal _Long;
		
		private string _StreetAddress;
		
		private long _OriginalSubmitterUserID;
		
		private System.DateTime _DateOfSubmission;
		
		private EntitySet<ToiletReview> _ToiletReviews;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnToiletIDChanging(long value);
    partial void OnToiletIDChanged();
    partial void OnLatChanging(decimal value);
    partial void OnLatChanged();
    partial void OnLongChanging(decimal value);
    partial void OnLongChanged();
    partial void OnStreetAddressChanging(string value);
    partial void OnStreetAddressChanged();
    partial void OnOriginalSubmitterUserIDChanging(long value);
    partial void OnOriginalSubmitterUserIDChanged();
    partial void OnDateOfSubmissionChanging(System.DateTime value);
    partial void OnDateOfSubmissionChanged();
    #endregion
		
		public ToiletListing()
		{
			this._ToiletReviews = new EntitySet<ToiletReview>(new Action<ToiletReview>(this.attach_ToiletReviews), new Action<ToiletReview>(this.detach_ToiletReviews));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ToiletID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ToiletID
		{
			get
			{
				return this._ToiletID;
			}
			set
			{
				if ((this._ToiletID != value))
				{
					this.OnToiletIDChanging(value);
					this.SendPropertyChanging();
					this._ToiletID = value;
					this.SendPropertyChanged("ToiletID");
					this.OnToiletIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lat", DbType="Decimal(18,0) NOT NULL")]
		public decimal Lat
		{
			get
			{
				return this._Lat;
			}
			set
			{
				if ((this._Lat != value))
				{
					this.OnLatChanging(value);
					this.SendPropertyChanging();
					this._Lat = value;
					this.SendPropertyChanged("Lat");
					this.OnLatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Long", DbType="Decimal(18,0) NOT NULL")]
		public decimal Long
		{
			get
			{
				return this._Long;
			}
			set
			{
				if ((this._Long != value))
				{
					this.OnLongChanging(value);
					this.SendPropertyChanging();
					this._Long = value;
					this.SendPropertyChanged("Long");
					this.OnLongChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StreetAddress", DbType="NVarChar(MAX)")]
		public string StreetAddress
		{
			get
			{
				return this._StreetAddress;
			}
			set
			{
				if ((this._StreetAddress != value))
				{
					this.OnStreetAddressChanging(value);
					this.SendPropertyChanging();
					this._StreetAddress = value;
					this.SendPropertyChanged("StreetAddress");
					this.OnStreetAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OriginalSubmitterUserID", DbType="BigInt NOT NULL")]
		public long OriginalSubmitterUserID
		{
			get
			{
				return this._OriginalSubmitterUserID;
			}
			set
			{
				if ((this._OriginalSubmitterUserID != value))
				{
					this.OnOriginalSubmitterUserIDChanging(value);
					this.SendPropertyChanging();
					this._OriginalSubmitterUserID = value;
					this.SendPropertyChanged("OriginalSubmitterUserID");
					this.OnOriginalSubmitterUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfSubmission", DbType="DateTime NOT NULL")]
		public System.DateTime DateOfSubmission
		{
			get
			{
				return this._DateOfSubmission;
			}
			set
			{
				if ((this._DateOfSubmission != value))
				{
					this.OnDateOfSubmissionChanging(value);
					this.SendPropertyChanging();
					this._DateOfSubmission = value;
					this.SendPropertyChanged("DateOfSubmission");
					this.OnDateOfSubmissionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ToiletListing_ToiletReview", Storage="_ToiletReviews", ThisKey="ToiletID", OtherKey="ToiletListingID")]
		public EntitySet<ToiletReview> ToiletReviews
		{
			get
			{
				return this._ToiletReviews;
			}
			set
			{
				this._ToiletReviews.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ToiletReviews(ToiletReview entity)
		{
			this.SendPropertyChanging();
			entity.ToiletListing = this;
		}
		
		private void detach_ToiletReviews(ToiletReview entity)
		{
			this.SendPropertyChanging();
			entity.ToiletListing = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ToiletReviews")]
	public partial class ToiletReview : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ToiletReviewID;
		
		private long _ToiletListingID;
		
		private int _ToiletStyleID;
		
		private System.Nullable<int> _UrinalCount;
		
		private System.Nullable<int> _StallCount;
		
		private System.Nullable<int> _SinkCount;
		
		private System.Nullable<int> _BabyChangingStationCount;
		
		private int _RatingOverall;
		
		private System.Nullable<int> _RatingCleanliness;
		
		private System.Nullable<int> _RatingAvailability;
		
		private System.Nullable<double> _TypicalWait;
		
		private string _Message;
		
		private long _VenueID;
		
		private System.DateTime _DateOfSubmission;
		
		private long _SubmitterUserID;
		
		private System.DateTime _DateOfLastUsageOfToiletBySubmitter;
		
		private EntityRef<ToiletListing> _ToiletListing;
		
		private EntityRef<ToiletStyle> _ToiletStyle;
		
		private EntityRef<ToiletVenue> _ToiletVenue;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnToiletReviewIDChanging(long value);
    partial void OnToiletReviewIDChanged();
    partial void OnToiletListingIDChanging(long value);
    partial void OnToiletListingIDChanged();
    partial void OnToiletStyleIDChanging(int value);
    partial void OnToiletStyleIDChanged();
    partial void OnUrinalCountChanging(System.Nullable<int> value);
    partial void OnUrinalCountChanged();
    partial void OnStallCountChanging(System.Nullable<int> value);
    partial void OnStallCountChanged();
    partial void OnSinkCountChanging(System.Nullable<int> value);
    partial void OnSinkCountChanged();
    partial void OnBabyChangingStationCountChanging(System.Nullable<int> value);
    partial void OnBabyChangingStationCountChanged();
    partial void OnRatingOverallChanging(int value);
    partial void OnRatingOverallChanged();
    partial void OnRatingCleanlinessChanging(System.Nullable<int> value);
    partial void OnRatingCleanlinessChanged();
    partial void OnRatingAvailabilityChanging(System.Nullable<int> value);
    partial void OnRatingAvailabilityChanged();
    partial void OnTypicalWaitChanging(System.Nullable<double> value);
    partial void OnTypicalWaitChanged();
    partial void OnMessageChanging(string value);
    partial void OnMessageChanged();
    partial void OnVenueIDChanging(long value);
    partial void OnVenueIDChanged();
    partial void OnDateOfSubmissionChanging(System.DateTime value);
    partial void OnDateOfSubmissionChanged();
    partial void OnSubmitterUserIDChanging(long value);
    partial void OnSubmitterUserIDChanged();
    partial void OnDateOfLastUsageOfToiletBySubmitterChanging(System.DateTime value);
    partial void OnDateOfLastUsageOfToiletBySubmitterChanged();
    #endregion
		
		public ToiletReview()
		{
			this._ToiletListing = default(EntityRef<ToiletListing>);
			this._ToiletStyle = default(EntityRef<ToiletStyle>);
			this._ToiletVenue = default(EntityRef<ToiletVenue>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ToiletReviewID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ToiletReviewID
		{
			get
			{
				return this._ToiletReviewID;
			}
			set
			{
				if ((this._ToiletReviewID != value))
				{
					this.OnToiletReviewIDChanging(value);
					this.SendPropertyChanging();
					this._ToiletReviewID = value;
					this.SendPropertyChanged("ToiletReviewID");
					this.OnToiletReviewIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ToiletListingID", DbType="BigInt NOT NULL")]
		public long ToiletListingID
		{
			get
			{
				return this._ToiletListingID;
			}
			set
			{
				if ((this._ToiletListingID != value))
				{
					if (this._ToiletListing.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnToiletListingIDChanging(value);
					this.SendPropertyChanging();
					this._ToiletListingID = value;
					this.SendPropertyChanged("ToiletListingID");
					this.OnToiletListingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ToiletStyleID", DbType="Int NOT NULL")]
		public int ToiletStyleID
		{
			get
			{
				return this._ToiletStyleID;
			}
			set
			{
				if ((this._ToiletStyleID != value))
				{
					if (this._ToiletStyle.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnToiletStyleIDChanging(value);
					this.SendPropertyChanging();
					this._ToiletStyleID = value;
					this.SendPropertyChanged("ToiletStyleID");
					this.OnToiletStyleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UrinalCount", DbType="Int")]
		public System.Nullable<int> UrinalCount
		{
			get
			{
				return this._UrinalCount;
			}
			set
			{
				if ((this._UrinalCount != value))
				{
					this.OnUrinalCountChanging(value);
					this.SendPropertyChanging();
					this._UrinalCount = value;
					this.SendPropertyChanged("UrinalCount");
					this.OnUrinalCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StallCount", DbType="Int")]
		public System.Nullable<int> StallCount
		{
			get
			{
				return this._StallCount;
			}
			set
			{
				if ((this._StallCount != value))
				{
					this.OnStallCountChanging(value);
					this.SendPropertyChanging();
					this._StallCount = value;
					this.SendPropertyChanged("StallCount");
					this.OnStallCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SinkCount", DbType="Int")]
		public System.Nullable<int> SinkCount
		{
			get
			{
				return this._SinkCount;
			}
			set
			{
				if ((this._SinkCount != value))
				{
					this.OnSinkCountChanging(value);
					this.SendPropertyChanging();
					this._SinkCount = value;
					this.SendPropertyChanged("SinkCount");
					this.OnSinkCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BabyChangingStationCount", DbType="Int")]
		public System.Nullable<int> BabyChangingStationCount
		{
			get
			{
				return this._BabyChangingStationCount;
			}
			set
			{
				if ((this._BabyChangingStationCount != value))
				{
					this.OnBabyChangingStationCountChanging(value);
					this.SendPropertyChanging();
					this._BabyChangingStationCount = value;
					this.SendPropertyChanged("BabyChangingStationCount");
					this.OnBabyChangingStationCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RatingOverall", DbType="Int NOT NULL")]
		public int RatingOverall
		{
			get
			{
				return this._RatingOverall;
			}
			set
			{
				if ((this._RatingOverall != value))
				{
					this.OnRatingOverallChanging(value);
					this.SendPropertyChanging();
					this._RatingOverall = value;
					this.SendPropertyChanged("RatingOverall");
					this.OnRatingOverallChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RatingCleanliness", DbType="Int")]
		public System.Nullable<int> RatingCleanliness
		{
			get
			{
				return this._RatingCleanliness;
			}
			set
			{
				if ((this._RatingCleanliness != value))
				{
					this.OnRatingCleanlinessChanging(value);
					this.SendPropertyChanging();
					this._RatingCleanliness = value;
					this.SendPropertyChanged("RatingCleanliness");
					this.OnRatingCleanlinessChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RatingAvailability", DbType="Int")]
		public System.Nullable<int> RatingAvailability
		{
			get
			{
				return this._RatingAvailability;
			}
			set
			{
				if ((this._RatingAvailability != value))
				{
					this.OnRatingAvailabilityChanging(value);
					this.SendPropertyChanging();
					this._RatingAvailability = value;
					this.SendPropertyChanged("RatingAvailability");
					this.OnRatingAvailabilityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypicalWait", DbType="Float")]
		public System.Nullable<double> TypicalWait
		{
			get
			{
				return this._TypicalWait;
			}
			set
			{
				if ((this._TypicalWait != value))
				{
					this.OnTypicalWaitChanging(value);
					this.SendPropertyChanging();
					this._TypicalWait = value;
					this.SendPropertyChanged("TypicalWait");
					this.OnTypicalWaitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Message", DbType="NVarChar(MAX)")]
		public string Message
		{
			get
			{
				return this._Message;
			}
			set
			{
				if ((this._Message != value))
				{
					this.OnMessageChanging(value);
					this.SendPropertyChanging();
					this._Message = value;
					this.SendPropertyChanged("Message");
					this.OnMessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VenueID", DbType="BigInt NOT NULL")]
		public long VenueID
		{
			get
			{
				return this._VenueID;
			}
			set
			{
				if ((this._VenueID != value))
				{
					if (this._ToiletVenue.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVenueIDChanging(value);
					this.SendPropertyChanging();
					this._VenueID = value;
					this.SendPropertyChanged("VenueID");
					this.OnVenueIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfSubmission", DbType="DateTime NOT NULL")]
		public System.DateTime DateOfSubmission
		{
			get
			{
				return this._DateOfSubmission;
			}
			set
			{
				if ((this._DateOfSubmission != value))
				{
					this.OnDateOfSubmissionChanging(value);
					this.SendPropertyChanging();
					this._DateOfSubmission = value;
					this.SendPropertyChanged("DateOfSubmission");
					this.OnDateOfSubmissionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubmitterUserID", DbType="BigInt NOT NULL")]
		public long SubmitterUserID
		{
			get
			{
				return this._SubmitterUserID;
			}
			set
			{
				if ((this._SubmitterUserID != value))
				{
					this.OnSubmitterUserIDChanging(value);
					this.SendPropertyChanging();
					this._SubmitterUserID = value;
					this.SendPropertyChanged("SubmitterUserID");
					this.OnSubmitterUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfLastUsageOfToiletBySubmitter", DbType="DateTime NOT NULL")]
		public System.DateTime DateOfLastUsageOfToiletBySubmitter
		{
			get
			{
				return this._DateOfLastUsageOfToiletBySubmitter;
			}
			set
			{
				if ((this._DateOfLastUsageOfToiletBySubmitter != value))
				{
					this.OnDateOfLastUsageOfToiletBySubmitterChanging(value);
					this.SendPropertyChanging();
					this._DateOfLastUsageOfToiletBySubmitter = value;
					this.SendPropertyChanged("DateOfLastUsageOfToiletBySubmitter");
					this.OnDateOfLastUsageOfToiletBySubmitterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ToiletListing_ToiletReview", Storage="_ToiletListing", ThisKey="ToiletListingID", OtherKey="ToiletID", IsForeignKey=true)]
		public ToiletListing ToiletListing
		{
			get
			{
				return this._ToiletListing.Entity;
			}
			set
			{
				ToiletListing previousValue = this._ToiletListing.Entity;
				if (((previousValue != value) 
							|| (this._ToiletListing.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ToiletListing.Entity = null;
						previousValue.ToiletReviews.Remove(this);
					}
					this._ToiletListing.Entity = value;
					if ((value != null))
					{
						value.ToiletReviews.Add(this);
						this._ToiletListingID = value.ToiletID;
					}
					else
					{
						this._ToiletListingID = default(long);
					}
					this.SendPropertyChanged("ToiletListing");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ToiletStyle_ToiletReview", Storage="_ToiletStyle", ThisKey="ToiletStyleID", OtherKey="ToiletStyleID", IsForeignKey=true)]
		public ToiletStyle ToiletStyle
		{
			get
			{
				return this._ToiletStyle.Entity;
			}
			set
			{
				ToiletStyle previousValue = this._ToiletStyle.Entity;
				if (((previousValue != value) 
							|| (this._ToiletStyle.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ToiletStyle.Entity = null;
						previousValue.ToiletReviews.Remove(this);
					}
					this._ToiletStyle.Entity = value;
					if ((value != null))
					{
						value.ToiletReviews.Add(this);
						this._ToiletStyleID = value.ToiletStyleID;
					}
					else
					{
						this._ToiletStyleID = default(int);
					}
					this.SendPropertyChanged("ToiletStyle");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ToiletVenue_ToiletReview", Storage="_ToiletVenue", ThisKey="VenueID", OtherKey="VenueID", IsForeignKey=true)]
		public ToiletVenue ToiletVenue
		{
			get
			{
				return this._ToiletVenue.Entity;
			}
			set
			{
				ToiletVenue previousValue = this._ToiletVenue.Entity;
				if (((previousValue != value) 
							|| (this._ToiletVenue.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ToiletVenue.Entity = null;
						previousValue.ToiletReviews.Remove(this);
					}
					this._ToiletVenue.Entity = value;
					if ((value != null))
					{
						value.ToiletReviews.Add(this);
						this._VenueID = value.VenueID;
					}
					else
					{
						this._VenueID = default(long);
					}
					this.SendPropertyChanged("ToiletVenue");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ToiletStyles")]
	public partial class ToiletStyle : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ToiletStyleID;
		
		private string _Name;
		
		private EntitySet<ToiletReview> _ToiletReviews;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnToiletStyleIDChanging(int value);
    partial void OnToiletStyleIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public ToiletStyle()
		{
			this._ToiletReviews = new EntitySet<ToiletReview>(new Action<ToiletReview>(this.attach_ToiletReviews), new Action<ToiletReview>(this.detach_ToiletReviews));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ToiletStyleID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ToiletStyleID
		{
			get
			{
				return this._ToiletStyleID;
			}
			set
			{
				if ((this._ToiletStyleID != value))
				{
					this.OnToiletStyleIDChanging(value);
					this.SendPropertyChanging();
					this._ToiletStyleID = value;
					this.SendPropertyChanged("ToiletStyleID");
					this.OnToiletStyleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ToiletStyle_ToiletReview", Storage="_ToiletReviews", ThisKey="ToiletStyleID", OtherKey="ToiletStyleID")]
		public EntitySet<ToiletReview> ToiletReviews
		{
			get
			{
				return this._ToiletReviews;
			}
			set
			{
				this._ToiletReviews.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ToiletReviews(ToiletReview entity)
		{
			this.SendPropertyChanging();
			entity.ToiletStyle = this;
		}
		
		private void detach_ToiletReviews(ToiletReview entity)
		{
			this.SendPropertyChanging();
			entity.ToiletStyle = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ToiletVenueHours")]
	public partial class ToiletVenueHour : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _VenueHoursID;
		
		private long _VenueID;
		
		private int _DayOfWeek;
		
		private System.DateTime _StartTime;
		
		private System.DateTime _EndTime;
		
		private EntityRef<WeekDay> _WeekDay;
		
		private EntityRef<ToiletVenue> _ToiletVenue;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVenueHoursIDChanging(long value);
    partial void OnVenueHoursIDChanged();
    partial void OnVenueIDChanging(long value);
    partial void OnVenueIDChanged();
    partial void OnDayOfWeekChanging(int value);
    partial void OnDayOfWeekChanged();
    partial void OnStartTimeChanging(System.DateTime value);
    partial void OnStartTimeChanged();
    partial void OnEndTimeChanging(System.DateTime value);
    partial void OnEndTimeChanged();
    #endregion
		
		public ToiletVenueHour()
		{
			this._WeekDay = default(EntityRef<WeekDay>);
			this._ToiletVenue = default(EntityRef<ToiletVenue>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VenueHoursID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long VenueHoursID
		{
			get
			{
				return this._VenueHoursID;
			}
			set
			{
				if ((this._VenueHoursID != value))
				{
					this.OnVenueHoursIDChanging(value);
					this.SendPropertyChanging();
					this._VenueHoursID = value;
					this.SendPropertyChanged("VenueHoursID");
					this.OnVenueHoursIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VenueID", DbType="BigInt NOT NULL")]
		public long VenueID
		{
			get
			{
				return this._VenueID;
			}
			set
			{
				if ((this._VenueID != value))
				{
					if (this._ToiletVenue.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVenueIDChanging(value);
					this.SendPropertyChanging();
					this._VenueID = value;
					this.SendPropertyChanged("VenueID");
					this.OnVenueIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DayOfWeek", DbType="Int NOT NULL")]
		public int DayOfWeek
		{
			get
			{
				return this._DayOfWeek;
			}
			set
			{
				if ((this._DayOfWeek != value))
				{
					if (this._WeekDay.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDayOfWeekChanging(value);
					this.SendPropertyChanging();
					this._DayOfWeek = value;
					this.SendPropertyChanged("DayOfWeek");
					this.OnDayOfWeekChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartTime", DbType="DateTime NOT NULL")]
		public System.DateTime StartTime
		{
			get
			{
				return this._StartTime;
			}
			set
			{
				if ((this._StartTime != value))
				{
					this.OnStartTimeChanging(value);
					this.SendPropertyChanging();
					this._StartTime = value;
					this.SendPropertyChanged("StartTime");
					this.OnStartTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndTime", DbType="DateTime NOT NULL")]
		public System.DateTime EndTime
		{
			get
			{
				return this._EndTime;
			}
			set
			{
				if ((this._EndTime != value))
				{
					this.OnEndTimeChanging(value);
					this.SendPropertyChanging();
					this._EndTime = value;
					this.SendPropertyChanged("EndTime");
					this.OnEndTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WeekDay_ToiletVenueHour", Storage="_WeekDay", ThisKey="DayOfWeek", OtherKey="WeekDayID", IsForeignKey=true)]
		public WeekDay WeekDay
		{
			get
			{
				return this._WeekDay.Entity;
			}
			set
			{
				WeekDay previousValue = this._WeekDay.Entity;
				if (((previousValue != value) 
							|| (this._WeekDay.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WeekDay.Entity = null;
						previousValue.ToiletVenueHours.Remove(this);
					}
					this._WeekDay.Entity = value;
					if ((value != null))
					{
						value.ToiletVenueHours.Add(this);
						this._DayOfWeek = value.WeekDayID;
					}
					else
					{
						this._DayOfWeek = default(int);
					}
					this.SendPropertyChanged("WeekDay");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ToiletVenue_ToiletVenueHour", Storage="_ToiletVenue", ThisKey="VenueID", OtherKey="VenueID", IsForeignKey=true)]
		public ToiletVenue ToiletVenue
		{
			get
			{
				return this._ToiletVenue.Entity;
			}
			set
			{
				ToiletVenue previousValue = this._ToiletVenue.Entity;
				if (((previousValue != value) 
							|| (this._ToiletVenue.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ToiletVenue.Entity = null;
						previousValue.ToiletVenueHours.Remove(this);
					}
					this._ToiletVenue.Entity = value;
					if ((value != null))
					{
						value.ToiletVenueHours.Add(this);
						this._VenueID = value.VenueID;
					}
					else
					{
						this._VenueID = default(long);
					}
					this.SendPropertyChanged("ToiletVenue");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ToiletVenues")]
	public partial class ToiletVenue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _VenueID;
		
		private string _VenueName;
		
		private EntitySet<ToiletReview> _ToiletReviews;
		
		private EntitySet<ToiletVenueHour> _ToiletVenueHours;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVenueIDChanging(long value);
    partial void OnVenueIDChanged();
    partial void OnVenueNameChanging(string value);
    partial void OnVenueNameChanged();
    #endregion
		
		public ToiletVenue()
		{
			this._ToiletReviews = new EntitySet<ToiletReview>(new Action<ToiletReview>(this.attach_ToiletReviews), new Action<ToiletReview>(this.detach_ToiletReviews));
			this._ToiletVenueHours = new EntitySet<ToiletVenueHour>(new Action<ToiletVenueHour>(this.attach_ToiletVenueHours), new Action<ToiletVenueHour>(this.detach_ToiletVenueHours));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VenueID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long VenueID
		{
			get
			{
				return this._VenueID;
			}
			set
			{
				if ((this._VenueID != value))
				{
					this.OnVenueIDChanging(value);
					this.SendPropertyChanging();
					this._VenueID = value;
					this.SendPropertyChanged("VenueID");
					this.OnVenueIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VenueName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string VenueName
		{
			get
			{
				return this._VenueName;
			}
			set
			{
				if ((this._VenueName != value))
				{
					this.OnVenueNameChanging(value);
					this.SendPropertyChanging();
					this._VenueName = value;
					this.SendPropertyChanged("VenueName");
					this.OnVenueNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ToiletVenue_ToiletReview", Storage="_ToiletReviews", ThisKey="VenueID", OtherKey="VenueID")]
		public EntitySet<ToiletReview> ToiletReviews
		{
			get
			{
				return this._ToiletReviews;
			}
			set
			{
				this._ToiletReviews.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ToiletVenue_ToiletVenueHour", Storage="_ToiletVenueHours", ThisKey="VenueID", OtherKey="VenueID")]
		public EntitySet<ToiletVenueHour> ToiletVenueHours
		{
			get
			{
				return this._ToiletVenueHours;
			}
			set
			{
				this._ToiletVenueHours.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ToiletReviews(ToiletReview entity)
		{
			this.SendPropertyChanging();
			entity.ToiletVenue = this;
		}
		
		private void detach_ToiletReviews(ToiletReview entity)
		{
			this.SendPropertyChanging();
			entity.ToiletVenue = null;
		}
		
		private void attach_ToiletVenueHours(ToiletVenueHour entity)
		{
			this.SendPropertyChanging();
			entity.ToiletVenue = this;
		}
		
		private void detach_ToiletVenueHours(ToiletVenueHour entity)
		{
			this.SendPropertyChanging();
			entity.ToiletVenue = null;
		}
	}
}
#pragma warning restore 1591
