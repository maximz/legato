@model Legato.ViewModels.SubmitViewModel

@{
	ViewBag.Title = "Submit";
	ViewBag.revNum = Legato.Current.RevNumber();
}

@section ScriptContentAtEndOfBody {
<script src="@Url.Content("~/static/js/jquery.validate.min.js")?@ViewBag.revNum" type="text/javascript"></script>
<script src="@Url.Content("~/static/js/jquery.validate.unobtrusive.min.js")?@ViewBag.revNum" type="text/javascript"></script>
<script src="@Url.Content("~/static/js/jquery.raty.min.js")?@ViewBag.revNum" type="text/javascript"></script>

<script>

try {

$('#rate_overall').raty({
  cancel:     false,
  scoreName:  '#ReviewRevision_RatingOverall',
  path:       '/static/images/raty/',
  click: function(score, evt) {
	$('#ReviewRevision_RatingOverall').val(score);
  }
});


// check whether Model already has the ratings set. If so, do raty.start(number) on each one that's set

@if (Model.ReviewRevision.RatingOverall != null && Model.ReviewRevision.RatingOverall != 0)
{
	<text>$.fn.raty.start(@Model.ReviewRevision.RatingOverall, '#rate_overall');</text>
}
}
catch(err) { // beware the raty
}

// handle changes in selected class
$("#Listing_Equipment_SelectedClass").change(function(e) { 
	$('#Listing_Equipment_SelectedClass option:selected').each(function() {
		//alert($(this).val() + $(this).text());
		if($(this).val() == '2') // text = "My own instrument"
		{
			$('#reviewFields').hide('slow');
		}
		else if($(this).val() == '1') // text = "A public instrument"
		{
			$('#reviewFields').show('slow');
		}
	});
});

// handle changes in has played checkbox
$(".hasPlayedCheckBox").change(function(e) { 
	if($('.hasPlayedCheckBox').is(':checked'))
	{
		$('#reviewMain').show('slow');   
	}
	else
	{
		$('#reviewMain').hide('slow');
	}
});

(function () {
    try {
	    var converter1 = Markdown.getSanitizingConverter();
	    var editor1 = new Markdown.Editor(converter1);
	    editor1.run();
    }
    catch(err) {
        // catch errors thrown in the Markdown editor. Namely, there is an error thrown when the browser has a pop-up blocker that overrides scrollBy() with null, so calls to that fail. Without this try-catch block, the code beneath these lines wouldn't work in browsers with such a pop-up blocker installed.
    }

    try {
	    var converter2 = Markdown.getSanitizingConverter();
	    var editor2 = new Markdown.Editor(converter2, '-second');
	    editor2.run();
    }
    catch(err2) {
        // catch errors thrown in the Markdown editor. Namely, there is an error thrown when the browser has a pop-up blocker that overrides scrollBy() with null, so calls to that fail. Without this try-catch block, the code beneath these lines wouldn't work in browsers with such a pop-up blocker installed.
    }
})();

</script>
}

<div class="row">
    <div class="span12">
        <ul class="breadcrumb">
            <li><a href="@Url.Action("Map", "Instruments")"><i class='icon-map-marker'></i> Instruments</a> <span class="divider">/</span></li>
            <li class="active"><i class="icon-plus-sign"></i> Submit</li>
        </ul>
    </div>
</div>
<div class="page-header">
    <h1>Submit <small>List an instrument in Legato Network</small></h1>
</div>
<div class="row">
    <div class="span12">

        @using (Html.BeginForm("Submit", "Instruments", FormMethod.Post, new { @class="form-horizontal" }))
        {
	        @Html.ValidationSummary(true)
	        <fieldset>
    			<legend>Listing</legend>
			
	    		<div class="control-group">
				    @Html.LabelFor(model => model.Listing.Equipment.SelectedType, new { @class = "control-label" })
			        <div class="controls">
				        @Html.DropDownListFor(model => model.Listing.Equipment.SelectedType, Model.Listing.Equipment.Types)
                        <p class="help-block">What kind of an instrument is this?</p>
				        @Html.ValidationMessageFor(model => model.Listing.Equipment.SelectedType)
			        </div>
                </div>
			
			    <div class="control-group">
				    @Html.LabelFor(model => model.Listing.StreetAddress, new { @class = "control-label" })
			        <div class="controls">
				        @Html.TextBoxFor(model => model.Listing.StreetAddress, new { @class = "input-xlarge" })
                        <p class="help-block">Where is this instrument located?</p>
				        @Html.ValidationMessageFor(model => model.Listing.StreetAddress)
			        </div>
                </div>

                <div class="control-group">
				    @Html.LabelFor(model => model.Listing.SelectedPrivacy, new { @class = "control-label" })
			        <div class="controls">
				        @Html.DropDownListFor(model => model.Listing.SelectedPrivacy, Model.Listing.PrivacySettings)
                        <p class="help-block">Visibility</p>
				        @Html.ValidationMessageFor(model => model.Listing.SelectedPrivacy)
			        </div>
                </div>

			    <div class="control-group">
				    @Html.LabelFor(model => model.Listing.VenueName, new { @class = "control-label" })
			        <div class="controls">
				        @Html.TextBoxFor(model => model.Listing.VenueName, new { @class = "input-xlarge" })
                        <p class="help-block">In what venue is this instrument located?</p>
				        @Html.ValidationMessageFor(model => model.Listing.VenueName)
			        </div>
                </div>

			    <div class="control-group">
				    @Html.LabelFor(model => model.Listing.Equipment.SelectedClass, new { @class = "control-label" })
                    <div class="controls">
				        @Html.DropDownListFor(model => model.Listing.Equipment.SelectedClass, Model.Listing.Equipment.Classes)
                        <p class="help-block">Is this instrument out in the wild, like a piano in a hotel or in a bar, or is this an instrument that you personally own?</p>
				        @Html.ValidationMessageFor(model => model.Listing.Equipment.SelectedClass)
			        </div>
                </div>

			    <div class="control-group">
				    @Html.LabelFor(model => model.Listing.Price, new { @class = "control-label" })
			        <div class="controls">
				        @Html.TextBoxFor(model => model.Listing.Price, new { title = "price in local currency", @class = "input-xlarge" }) per @Html.TextBoxFor(model => model.Listing.TimeSpanOfPrice, new { title = "year, month, day, hour, etc.", @class = "input-xlarge" })
				        <p class="help-block">Are people required to pay to use this instrument? If so, how much must they pay per block of time?<br />For instance, you could enter a price of 10 per hour, where 10 is in the local currency.</p>
                        @Html.ValidationMessageFor(model => model.Listing.Price)
				        @Html.ValidationMessageFor(model => model.Listing.TimeSpanOfPrice)
			        </div>
                </div>

			    <div class="control-group">
				    @Html.LabelFor(model => model.Listing.GeneralInfoMarkdown, new { @class = "control-label" })
			        <div class="controls wmd-panel">
				        @Html.ValidationMessageFor(model => model.Listing.GeneralInfoMarkdown)
				        <p class="help-block">Please give <b>some general information</b> about this instrument, such as what kind of instrument it is, where it is located, when it is available, and what venue it is in.</p>
				        <div id="wmd-button-bar" class="wmd-panel"></div>
				        @Html.TextAreaFor(model => model.Listing.GeneralInfoMarkdown, new { @class = "wmd-input input-xlarge span7", rows="8", id = "wmd-input" })
				        <div id="wmd-preview" class="wmd-preview wmd-panel span7" style="margin-left:0;"></div>
			        </div>
                </div>
	        </fieldset>
            
	        <fieldset id="reviewFields">
	            <legend>Review</legend>
		        
                <div class="control-group">
			        <div class="controls">
						<label class="checkbox">
							@Html.CheckBoxFor(model => model.HasPlayedOnInstrument, new { @class = "hasPlayedCheckBox" })
							<span>Have you played on this instrument?</span>
						</label>
			        </div> 
		        </div>

		        <div id="reviewMain" style="display:none;">
				    @Html.HiddenFor(m => m.ReviewRevision.RatingOverall)
				    
                    <div class="control-group">
					    @Html.LabelFor(model => model.ReviewRevision.RatingOverall, new { @class = "control-label" })
				        <div class="controls">
					        <div id="rate_overall"></div>
                            <p class="help-block">Please give this instrument a rating out of 5 stars. Did you like it?</p>
					        @Html.ValidationMessageFor(model => model.ReviewRevision.RatingOverall)
				        </div>
                    </div>

			        <div class="control-group">
				        @Html.LabelFor(model => model.ReviewRevision.ReviewMarkdown, new { @class = "control-label" })
				        <div class="controls wmd-panel">
					        @Html.ValidationMessageFor(model => model.ReviewRevision.ReviewMarkdown)
					        <p class="help-block">Please give <b>your opinion</b> about this instrument, including how playing on it felt, whether the location and owner were hospitable, the quality of the instrument and venue, and other details about your experience. Tell us your story.</p>
					        <div id="wmd-button-bar-second" class="wmd-panel"></div>
					        @Html.TextAreaFor(model => model.ReviewRevision.ReviewMarkdown, new { @class = "wmd-input input-xlarge span7", rows="8", id = "wmd-input-second" })
					        <div id="wmd-preview-second" class="wmd-preview wmd-panel span7" style="margin-left:0;"></div>
				        </div>
			        </div>
		        </div>
	        </fieldset>
            
	        <div class="form-actions">
	            <input type="submit" class="btn btn-success btn-large" value="Save changes">&nbsp;<button type="reset" onclick="window.history.go(-1);" class="btn btn-inverse">Cancel</button>
	        </div>
		
        }
	</div>
</div> <!-- /row -->